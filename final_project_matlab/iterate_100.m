clear all
clc

%%%%%%%%%%%%%%%%% Inputs %%%%%%%%%%%%%%%%%
% Number of points
x_num = 64;
y_num = 256;
cfl_target = 1.1; % Time step calculated from CFL
time_iterations = 100;

x_len = 0.25;
y_len = 1;

ghost = 1; % number  of ghost cells

%%%%%%%%%%%%%%%%% Setup %%%%%%%%%%%%%%%%%

% find boundaries
top_wall = ghost + y_num;
right_wall = ghost + x_num;

% Calculate space steps
dx = x_len/x_num;
dy = y_len/y_num;

% Calculate matrix for poisson solution
k_mod = get_k_mod(x_num, y_num, dx, dy);

% Fill u and v with random numbers
u_velocity = rand(x_num + 2 * ghost, y_num + 2 * ghost);
v_velocity = rand(x_num + 2 * ghost, y_num + 2 * ghost);

% Set boundary condition
[u_velocity, v_velocity] = boundaries( ...
    x_num, y_num, ghost, u_velocity, v_velocity ...
);

% Remove Divergence
[u_velocity, v_velocity] = remove_divergence( ...
    u_velocity, v_velocity, dx, dy, x_num, y_num, k_mod, ghost ...
);

% Calculate dt size
dt = cfl_target / ( ...
    max(max(abs(u_velocity)))/dx + max(max(abs(v_velocity)))/dy ...
);

% Calculate final time after 100 steps
end_time = time_iterations * dt;

% Calculate initial divergence
initial_velocity_divergence = velocity_divergence( ...
    u_velocity, v_velocity, dx, dy, x_num, y_num, ghost ...
);

fprintf( ...
    "max initial divergence = %.2e \n", ...
    max(max(abs(initial_velocity_divergence))) ...
);

% Calculate initial kinetic energy
initial_kinetic_energy = get_kinetic_energy( ...
    u_velocity, v_velocity, top_wall, right_wall, ghost ...
);

%%%%%%%%%%%%%%%%% Time Integration %%%%%%%%%%%%%%%%%

fig1 = simulation_plot( ...
    u_velocity, ...
    v_velocity, ...
    x_num, ...
    y_num, ...
    ghost, ...
    initial_velocity_divergence, ...
    initial_kinetic_energy, ...
    "initial_profile_100_iterations.png" ...
);

% Run simulation
[u_velocity, v_velocity] = simulate( ...
    u_velocity, v_velocity, dx, dy, ...
    dt, 0, end_time, ...
    x_num, y_num, ghost, ...
    k_mod  ...
);

% Calculate initial divergence
final_velocity_divergence = velocity_divergence( ...
    u_velocity, v_velocity, dx, dy, x_num, y_num, ghost ...
);

fprintf( ...
    "max initial divergence = %.2e \n", ...
    max(max(abs(final_velocity_divergence))) ...
);

% Calculate initial kinetic energy
kinetic_energy = get_kinetic_energy( ...
    u_velocity, v_velocity, top_wall, right_wall, ghost ...
);

fig2 = simulation_plot( ...
    u_velocity, ...
    v_velocity, ...
    x_num, ...
    y_num, ...
    ghost, ...
    final_velocity_divergence, ...
    kinetic_energy, ...
    "final_profile_100_iterations.png" ...
);

fprintf( ...
    "Kinetic Energy Change = %.2e \n", ...
    sum(sum(final_kinetic_energy)) - sum(sum(initial_kinetic_energy)) ...
)

disp("Simulation Complete")
